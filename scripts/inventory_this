#!/usr/bin/env python
'''
srvinv-cli/scripts/inventory_this
a script to register this machine inside the srvinv
this is very basic and relies on some assumptions (e.g. disksize is only '/')
'''

import json
from netaddr import IPNetwork, IPAddress
import netifaces
import os
import platform
import psutil
import string
import sys

gs_base_path = os.path.join(os.path.dirname(__file__), os.pardir)
sys.path.append(gs_base_path)

import libsrvinv

cpu_cores = str(psutil.cpu_count())
ram_size_mb = str(psutil.virtual_memory().total / 1024 / 1024)
disk_size_gb = str(psutil.disk_usage('/').total / 1024 / 1024 / 1024)

interfaces_to_inv = libsrvinv.get_iface_to_addr()

(priv_ip, priv_interface, net_id) = libsrvinv.get_priv_info(interfaces_to_inv)

if not priv_ip:
  print('Failed to match local IPs against registered networks')
  sys.exit(1)

interfaces_to_inv = json.dumps(interfaces_to_inv)

srvid = libsrvinv.get_own_srvid(priv_ip)

os = platform.system()
os_version = platform.release()
os_arch = platform.machine()

print('Inventory srvid: ' + srvid)
# try to register the srvid
if libsrvinv.register('srv', srvid) != 2: print('Register: done')
# set values
if libsrvinv.set('srv', srvid, 'net_id', net_id) == 0: print('net_id: ' + net_id)
if libsrvinv.set('srv', srvid, 'cpu_cores', cpu_cores) == 0: print('CPU cores: ' + cpu_cores)
if libsrvinv.set('srv', srvid, 'ram_size_mb', ram_size_mb) == 0: print('RAM size mb: ' + ram_size_mb)
if libsrvinv.set('srv', srvid, 'disk_size_gb', disk_size_gb) == 0: print('disk size gb: ' + disk_size_gb)
if libsrvinv.set('srv', srvid, 'interfaces', interfaces_to_inv) == 0: print('interfaces: ' + interfaces_to_inv)
if libsrvinv.set('srv', srvid, 'os', os) == 0: print('os: ' + os)
if libsrvinv.set('srv', srvid, 'os_version', os_version) == 0: print('os version: ' + os_version)
if libsrvinv.set('srv', srvid, 'os_arch', os_arch) == 0: print('os arch: ' + os_arch)
if libsrvinv.set('srv', srvid, 'priv_ip', priv_ip) == 0: print('priv ip: ' + priv_ip)
if libsrvinv.set('srv', srvid, 'priv_interface', priv_interface) == 0: print('priv interface: ' + priv_interface)
